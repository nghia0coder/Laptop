@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@model IEnumerable<ProductVariation>
@inject LaptopContext _context
@inject UserManager<AppUserModel> _user
@{
	ViewData["Title"] = "LoaiProduct";
	Layout = "~/Views/Layout/_CategoryLayout.cshtml";

	Page page = new Page();

	int pageNo = 0;

	if (ViewBag.Page != null)
	{
		page = ViewBag.Page;
		pageNo = page.CurrentPage;
	}
}
@{

	IEnumerable<Category> categories = ViewBag.Categories as IEnumerable<Category>;
	IEnumerable<Brand> brands = ViewBag.Brand as IEnumerable<Brand>;
	string currentUrl = Context.Request.GetDisplayUrl();
	string? userId = null;
	@if (User.Identity.IsAuthenticated)
	{
		userId = User.FindFirst(ClaimTypes.NameIdentifier).Value;
	}
}

<input type="hidden" id="category-id" value="@Model.FirstOrDefault().ProductItems.Product.CategoryId" />

<!-- SECTION -->
<div class="section">
	<!-- container -->
	<div class="container">
		<!-- row -->
		<div class="row">
			<!-- ASIDE -->
			<div id="aside" class="col-md-3">
				<div class="price-filter">
					<h2>Filter By Price</h2>
					<div id="price-slider"></div>
					<div class="input-number price-min">
						<input id="price-min" type="number" value="10000000">
					</div>
					<span>-</span>
					<div class="input-number price-max">
						<input id="price-max" type="number" value="50000000">
					</div>
				</div>
				<!-- aside Widget -->
				<div class="aside">
					<h3 class="aside-title">Brands</h3>
					<div class="checkbox-filter">
						@foreach (var item in brands)
						{
							<div class="input-checkbox">
								<input type="checkbox" class="brand-checkbox" name="brand" id="@item.BrandId">
								<label for="@item.BrandId">
									<span></span>
									@item.BrandName

								</label>
							</div>
						}
					</div>

				</div>
				<!-- /aside Widget -->


				<a></a>
			</div>
			<!-- /ASIDE -->
			<!-- STORE -->
			<div id="store" class="col-md-9">
				<!-- store top filter -->
				<div class="store-filter clearfix">
					<div class="store-sort">
						<label>
							Sort By Price
							<select class="sort-select">
								<option value="0">Increasing</option>
								<option value="1">Decreasing</option>
							</select>
						</label>
					</div>

				</div>
				<!-- /store top filter -->
				<!-- store products -->
				<div class="row">
					<!-- product -->
					@if (Model.Count() > 0)
					{

						@foreach (var item in Model)
						{

							var customerId = _context.Customers.Where(n => n.AccountId == userId).Select(n => n.CustomerId).FirstOrDefault();
							if (customerId == 0)
							{
								customerId = _context.Employees.Where(n => n.AccountId == userId).Select(n => n.EmployeeId).FirstOrDefault();
							}
							<div class="col-md-4 col-xs-6">
								<div class="product">
									<a asp-action="XemChiTiet" asp-route-id="@item.ProductVarId" />
									<div class="product-img">
										<img src="~/Contents/img/@item.ProductItems.Image1" alt="">
										<div class="product-label">
											<span class="sale">-30%</span>
											<span class="new">NEW</span>
										</div>
									</div>
									<div class="product-body">
										<p class="product-category">@item.ProductItems.Product.Category?.CategoryName</p>
										<h3 class="product-name"><a href="#">@item.ProductItems.Product.ProductName @item.Ram?.RamName?.ToUpper() @item.Ssd.Ssdname</a></h3>
										<h4 class="product-price">@item.Price.ToString("#,##0") VNĐ <del class="product-old-price">@item.OriginPrice</del></h4>
										<div class="product-rating">
											<i class="fa fa-star"></i>
											<i class="fa fa-star"></i>
											<i class="fa fa-star"></i>
											<i class="fa fa-star"></i>
											<i class="fa fa-star"></i>
										</div>
										<div class="product-btns">
											@if (item != null && customerId != 0)
											{
												var wish = _context.WishLists.FirstOrDefault(n => n.ProductId == item.ProductVarId && n.CustomerId == customerId);

												if (wish != null)
												{
													<button id="wishlist-button" data-product-id="@item.ProductVarId" style="color : red;" class="add-to-wishlist">
														<i class="fa fa-heart" style="display: none; display : inline;"></i><span class="tooltipp">add to wishlist</span>
													</button>
												}
												else
												{
													<button id="wishlist-button" data-product-id="@item.ProductVarId" class="add-to-wishlist">
														<i class="fa fa-heart-o"></i><span class="tooltipp">add to wishlist</span>
													</button>
												}


											}
											<button class="add-to-compare"><i class="fa fa-exchange"></i><span class="tooltipp">add to compare</span></button>
										</div>
									</div>
								</div>
							</div>
						}
					}
					<!-- /product -->
				</div>
				<!-- /store products 	<!-- store bottom filter -->

				<div class="store-filter clearfix">
					@if (page.TotalItems > 0)
					{
						<ul class="store-pagination">

							@if (page.CurrentPage > 1)
							{
								<li>
									<a asp-controller="ProductView" asp-action="ProductCate" asp-route-Id="@Model.FirstOrDefault().ProductItems.Product.CategoryId" asp-route-pg="1"><i class="fa fa-angle-left"></i><i class="fa fa-angle-left"></i></a>
								</li>
								<li>
									<a asp-controller="ProductView" asp-action="ProductCate" asp-route-Id="@Model.FirstOrDefault().ProductItems.Product.CategoryId" asp-route-pg="@(page.CurrentPage - 1)"><i class="fa fa-angle-left"></i></a>
								</li>
							}
							@for (var pge = page.StartPage; pge <= page.EndPage; pge++)
							{
								<li class="@(pge == page.CurrentPage ? "active" : "")">
									<a asp-controller="ProductView" asp-action="ProductCate" asp-route-Id="@Model.FirstOrDefault().ProductItems.Product.CategoryId" asp-route-pg="@pge">@pge </a>
								</li>
							}

							@if (page.CurrentPage < page.TotalPages)
							{
								<li>
									<a asp-controller="ProductView" asp-action="ProductCate" asp-route-Id="@Model.FirstOrDefault().ProductItems.Product.CategoryId" asp-route-pg="@(page.CurrentPage+1)"><i class="fa fa-angle-right"></i></a>
								</li>
								<li>
									<a asp-controller="ProductView" asp-action="ProductCate" asp-route-Id="@Model.FirstOrDefault().ProductItems.Product.CategoryId" asp-route-pg="@(page.TotalPages)"><i class="fa fa-angle-right"></i><i class="fa fa-angle-right"></i></a>
								</li>
							}

						</ul>

					}
					@for (var pge = page.StartPage; pge <= page.EndPage; pge++)
					{

					}
				</div>
				<!-- /store bottom filter -->

			</div>
			<!-- /STORE -->
		</div>
		<!-- /row -->
	</div>
	<!-- /container -->
</div>
<!-- /SECTION -->

<style>
	.add-to-wishlist.active {
		color: red; /* Màu sắc hoặc bất kỳ thay đổi nào bạn muốn khi button được active */
	}

	.add-to-wishlist .fa.fa-heart {
		display: none; /* Ẩn icon trái tim rỗng */
	}

	.add-to-wishlist.active .fa.fa-heart-o {
		display: none; /* Ẩn icon trái tim rỗng khi active */
	}

	.add-to-wishlist.active .fa.fa-heart {
		display: inline; /* Hiện icon trái tim đầy khi active */
	}

	.store-pagination li.active a {
		color: white;
	}

</style>


<script>

	document.querySelectorAll('.add-to-wishlist').forEach(function (button) {
		button.addEventListener('click', function () {

			this.classList.toggle('active');

			const icon = this.querySelector('i');
			if (this.classList.contains('active')) {
				icon.classList.remove('fa-heart-o');
				icon.classList.add('fa-heart');

				var productId = this.getAttribute('data-product-id');
				addWishlist(productId);

			} else {
				icon.classList.remove('fa-heart');
				icon.classList.add('fa-heart-o');

				var productId = this.getAttribute('data-product-id');
				removeWishlist(productId);
			}
		});
	});


	function addWishlist(productId) {
		$.ajax({
			type: 'POST',
			url: '@Url.Action("AddWishList", "ProductView")',
			data: { id: productId },
			success: function (data) {

			},
		});
	}

	function removeWishlist(productId) {
		$.ajax({
			type: 'POST',
			url: '@Url.Action("RemoveWishList", "ProductView")',
			data: { id: productId },
			success: function (data) {

			},
		});
	}

</script>

@section Scripts {
	<script>
		document.addEventListener("DOMContentLoaded", function () {
			const checkboxes = document.querySelectorAll('.brand-checkbox');

			checkboxes.forEach((checkbox) => {
				checkbox.addEventListener('change', function () {
					// Ensure only one checkbox is checked at a time
					checkboxes.forEach((otherCheckbox) => {
						if (otherCheckbox !== this) {
							otherCheckbox.checked = false;
						}
					});

					if (this.checked) {
						var selectedCate = this.checked ? this.id : null;
						var cate = $('#category-id').val();

						$.ajax({
							url: '@Url.Action("FilterByBrands", "ProductView")',
							type: 'GET',
							data: { brandid: selectedCate, cateid: cate },
							success: function (productlist) {
								var newproductrow = "";

								$.each(productlist["$values"], function (index, item) {
									newproductrow += '<div class="col-md-4 col-xs-6">';
									newproductrow += '<div class="product">';
									newproductrow += '<a href = "/detail/' + item.productVarId + '">';
									newproductrow += '<div class="product-img">';
									newproductrow += '<img src="/Contents/img/' + item.img + '" width="200" height="200" alt="">';
									newproductrow += '<div class="product-label">';
									newproductrow += '<span class="sale">-30%</span>';
									newproductrow += '<span class="new">NEW</span>';
									newproductrow += '</div>'; // Close product-label
									newproductrow += '</div>'; // Close product-img
									newproductrow += '<div class="product-body">';
									newproductrow += '<p class="product-category">' + item.category + '</p>';
									newproductrow += '<h3 class="product-name">' + item.productName + ' ' + item.ram + ' ' + item.ssd + '</h3>';
									newproductrow += '<h4 class="product-price">' + item.price.toLocaleString("vi-VN", { style: "currency", currency: "VND" }).replace("₫", "VNĐ") + '</h4>';
									newproductrow += '<div class="product-rating">';
									newproductrow += '<i class="fa fa-star"></i>';
									newproductrow += '<i class="fa fa-star"></i>';
									newproductrow += '<i class="fa fa-star"></i>';
									newproductrow += '<i class="fa fa-star"></i>';
									newproductrow += '<i class="fa fa-star"></i>';
									newproductrow += '</div>'; // Close product-rating
									newproductrow += '</div>'; // Close product-body
									newproductrow += '</a>';
									newproductrow += '</div>'; // Close product
									newproductrow += '</div>'; // Close col-md-4
								});

								$("#store .row").html(newproductrow);


							}
						});
					} else {

						window.location.reload(); // Tải lại trang
					}
				});
			});
		});
		var categoryName = $('.product-category').data('category');
		$(function () {
			$("#price-slider").slider({
				range: true,
				min: 10000000,
				max: 50000000,
				values: [10000000, 50000000],
				slide: function (event, ui) {
					$("#price-min").val(ui.values[0]);
					$("#price-max").val(ui.values[1]);
				}
			});

			// Set initial values for the input fields
			$("#price-min").val($("#price-slider").slider("values", 0));
			$("#price-max").val($("#price-slider").slider("values", 1));
		});

		$(function () {
			$("#price-slider").slider({
				range: true,
				min: 10000000,
				max: 50000000,
				values: [10000000, 50000000],
				slide: function (event, ui) {
					$("#price-min").val(ui.values[0]);
					$("#price-max").val(ui.values[1]);

				},
				stop: function (event, ui) {
					var min = ui.values[0];
					var max = ui.values[1];


					var category = $('#category-id').val();
					$.ajax({
						url: '@Url.Action("FilterByPrice", "ProductView")',
						type: 'GET',
						data: { minPrice: min, maxPrice: max, categoryId: category },
						success: function (productlist) {
							var newproductrow = "";
							$.each(productlist["$values"], function (index, item) {
								newproductrow += '<div class="col-md-4 col-xs-6">';
								newproductrow += '<div class="product">';
								newproductrow += '<a href = "/detail/' + item.productVarId + '">';
								newproductrow += '<div class="product-img">';
								newproductrow += '<img src="/Contents/img/' + item.img + '" width="200" height="200" alt="">';
								newproductrow += '<div class="product-label">';
								newproductrow += '<span class="sale">-30%</span>';
								newproductrow += '<span class="new">NEW</span>';
								newproductrow += '</div>'; // Close product-label
								newproductrow += '</div>'; // Close product-img
								newproductrow += '<div class="product-body">';
								newproductrow += '<p class="product-category">' + item.category + '</p>';
								newproductrow += '<h3 class="product-name">' + item.productName + ' ' + item.ram + ' ' + item.ssd + '</h3>';
								newproductrow += '<h4 class="product-price">' + item.price.toLocaleString("vi-VN", { style: "currency", currency: "VND" }).replace("₫", "VNĐ") + '</h4>';
								newproductrow += '<div class="product-rating">';
								newproductrow += '<i class="fa fa-star"></i>';
								newproductrow += '<i class="fa fa-star"></i>';
								newproductrow += '<i class="fa fa-star"></i>';
								newproductrow += '<i class="fa fa-star"></i>';
								newproductrow += '<i class="fa fa-star"></i>';
								newproductrow += '</div>'; // Close product-rating
								newproductrow += '</div>'; // Close product-body
								newproductrow += '</a>';
								newproductrow += '</div>'; // Close product
								newproductrow += '</div>'; // Close col-md-4
							});

							$("#store .row").html(newproductrow);
						}
					});
				}
			});
		});

		const selectBox = document.querySelector('.sort-select');

		console.log(selectBox);

		selectBox.addEventListener('change', function () {
			var sort = this.value; // Lấy giá trị được chọn từ select box
			var category = $('#category-id').val();
			// Thực hiện Ajax request dựa trên giá trị được chọn để lọc dữ liệu
			$.ajax({
				url: '@Url.Action("SortProducts", "ProductView")', // Đặt url của action xử lý lọc
				type: 'GET',
				data: { sortBy: sort, categoryId: category }, // Truyền giá trị lựa chọn để xử lý trên phía server
				success: function (productlist) {
					var newproductrow = "";
					$.each(productlist["$values"], function (index, item) {
						newproductrow += '<div class="col-md-4 col-xs-6">';
						newproductrow += '<div class="product">';
						newproductrow += '<a href = "/detail/' + item.productVarId + '">';
						newproductrow += '<div class="product-img">';
						newproductrow += '<img src="/Contents/img/' + item.img + '" width="200" height="200" alt="">';
						newproductrow += '<div class="product-label">';
						newproductrow += '<span class="sale">-30%</span>';
						newproductrow += '<span class="new">NEW</span>';
						newproductrow += '</div>'; // Close product-label
						newproductrow += '</div>'; // Close product-img
						newproductrow += '<div class="product-body">';
						newproductrow += '<p class="product-category">' + item.category + '</p>';
												newproductrow += '<h3 class="product-name">' + item.productName + ' ' + item.ram + ' ' + item.ssd + '</h3>';
						newproductrow += '<h4 class="product-price">' + item.price.toLocaleString("vi-VN", { style: "currency", currency: "VND" }).replace("₫", "VNĐ") + '</h4>';
						newproductrow += '<div class="product-rating">';
						newproductrow += '<i class="fa fa-star"></i>';
						newproductrow += '<i class="fa fa-star"></i>';
						newproductrow += '<i class="fa fa-star"></i>';
						newproductrow += '<i class="fa fa-star"></i>';
						newproductrow += '<i class="fa fa-star"></i>';
						newproductrow += '</div>'; // Close product-rating
						newproductrow += '</div>'; // Close product-body
						newproductrow += '</a>';
						newproductrow += '</div>'; // Close product
						newproductrow += '</div>'; // Close col-md-4
					});

					// Thay thế nội dung của #store .row bằng nội dung mới được tạo
					$("#store .row").html(newproductrow);
				}
			});
		});
	</script>
}
<style>
	.ui-slider .ui-slider-range {
		background-color: #D10024; /* Màu nền tùy chỉnh */
	}

	.ui-slider .ui-slider-handle {
		width: 20px; /* Đặt chiều rộng của tay cầm */
		height: 20px; /* Đặt chiều cao của tay cầm */
		border-radius: 50%; /* Làm tròn tay cầm để tạo hình tròn */
		background-color: #FFF; /* Màu nền tùy chỉnh cho tay cầm */
		top: 50%;
		transform: translateY(-50%); /* Căn giữa tay cầm theo chiều dọc */
		border: 2px solid #FFF; /* Thêm viền nếu muốn */
		box-shadow: 0 0 8px rgba(0,0,0,0.3); /* Bóng đổ cho hiệu ứng nổi */
	}

	.sort-select {
		padding: 0px 15px;
		background: #FFF;
		border: 1px solid #E4E7ED;
		height: 40px;
	}

</style>
