// <auto-generated />
using System;
using Laptop.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Laptop.Migrations
{
    [DbContext(typeof(LaptopContext))]
    [Migration("20240414164550_comments")]
    partial class comments
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Laptop.Models.AppUserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Laptop.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"), 1L, 1);

                    b.Property<string>("BrandName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BrandId");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("Laptop.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Laptop.Models.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ColorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColorId"), 1L, 1);

                    b.Property<string>("ColorName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ColorId");

                    b.ToTable("Color", (string)null);
                });

            modelBuilder.Entity("Laptop.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"), 1L, 1);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.HasKey("InvoiceId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("Laptop.Models.InvoiceDetail", b =>
                {
                    b.Property<int>("ProductVarId")
                        .HasColumnType("int")
                        .HasColumnName("ProductVarID");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("Quanity")
                        .HasColumnType("int");

                    b.HasKey("ProductVarId", "InvoiceId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("Laptop.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("OrderID");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CustomerID");

                    b.Property<bool>("Delivered")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<long?>("Total")
                        .HasColumnType("bigint")
                        .HasColumnName("PriceTotal");

                    b.Property<string>("Voucher")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Voucher");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Laptop.Models.OrdersDetail", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("OrderID");

                    b.Property<int>("ProductVarId")
                        .HasColumnType("int")
                        .HasColumnName("ProductVarID");

                    b.Property<int?>("Quanity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductVarId")
                        .HasName("PK_OrdersDetails_1");

                    b.HasIndex("ProductVarId");

                    b.ToTable("OrdersDetails");
                });

            modelBuilder.Entity("Laptop.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int?>("Brand")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Hot")
                        .HasColumnType("bit");

                    b.Property<bool>("New")
                        .HasColumnType("bit");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TopSelling")
                        .HasColumnType("bit");

                    b.HasKey("ProductId");

                    b.HasIndex("Brand");

                    b.HasIndex("CategoryId");

                    b.HasIndex(new[] { "ProductId" }, "ProductName")
                        .IsUnique();

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Laptop.Models.ProductComment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Detail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Ratings")
                        .HasColumnType("int")
                        .HasColumnName("Rating");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CommentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductComment", (string)null);
                });

            modelBuilder.Entity("Laptop.Models.ProductItem", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("ColorID");

                    b.Property<string>("Image1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductItemsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductItemsId"), 1L, 1);

                    b.HasKey("ProductId", "ColorId")
                        .HasName("PK_ProductItems_1");

                    b.HasIndex("ColorId");

                    b.HasIndex(new[] { "ProductItemsId" }, "IX_ProductItems")
                        .IsUnique();

                    b.HasIndex(new[] { "ProductCode" }, "ProductCode")
                        .IsUnique()
                        .HasFilter("[ProductCode] IS NOT NULL");

                    b.ToTable("ProductItems");
                });

            modelBuilder.Entity("Laptop.Models.ProductVariation", b =>
                {
                    b.Property<int>("ProductItemsId")
                        .HasColumnType("int")
                        .HasColumnName("ProductItemsID");

                    b.Property<int>("RamId")
                        .HasColumnType("int")
                        .HasColumnName("RamID");

                    b.Property<int>("Ssdid")
                        .HasColumnType("int")
                        .HasColumnName("SSDID");

                    b.Property<int?>("OriginPrice")
                        .HasColumnType("int");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductVarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductVarID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductVarId"), 1L, 1);

                    b.Property<int?>("QtyinStock")
                        .HasColumnType("int");

                    b.HasKey("ProductItemsId", "RamId", "Ssdid")
                        .HasName("PK_ProductVariation_1");

                    b.HasIndex("RamId");

                    b.HasIndex("Ssdid");

                    b.HasIndex(new[] { "ProductVarId" }, "IX_ProductVariation")
                        .IsUnique();

                    b.ToTable("ProductVariation", (string)null);
                });

            modelBuilder.Entity("Laptop.Models.Ram", b =>
                {
                    b.Property<int>("RamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RamID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RamId"), 1L, 1);

                    b.Property<string>("RamName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RamId");

                    b.ToTable("Ram", (string)null);
                });

            modelBuilder.Entity("Laptop.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Setting", (string)null);
                });

            modelBuilder.Entity("Laptop.Models.Ssd", b =>
                {
                    b.Property<int>("SsdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SsdID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SsdId"), 1L, 1);

                    b.Property<string>("Ssdname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SSDName");

                    b.HasKey("SsdId");

                    b.ToTable("SSD", (string)null);
                });

            modelBuilder.Entity("Laptop.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("Laptop.Models.Tintuc", b =>
                {
                    b.Property<int>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PostID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostID"), 1L, 1);

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrandID")
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contentspreview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date2");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CustomerId");

                    b.Property<bool>("Hot")
                        .HasColumnType("bit");

                    b.Property<bool>("New")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Thumburl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("PostID");

                    b.HasIndex("BrandID");

                    b.HasIndex("CustomerId");

                    b.ToTable("Tintuc", (string)null);
                });

            modelBuilder.Entity("Laptop.Models.Voucher", b =>
                {
                    b.Property<string>("VoucherCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("VoucherQuantity")
                        .HasColumnType("int");

                    b.HasKey("VoucherCode");

                    b.ToTable("Voucher", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Laptop.Models.Invoice", b =>
                {
                    b.HasOne("Laptop.Models.Supplier", "Supplier")
                        .WithMany("Invoices")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_Import_Note_Suppiler");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Laptop.Models.InvoiceDetail", b =>
                {
                    b.HasOne("Laptop.Models.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceDetails_Invoice1");

                    b.HasOne("Laptop.Models.ProductVariation", "ProductVar")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ProductVarId")
                        .HasPrincipalKey("ProductVarId")
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceDetails_ProductVariation");

                    b.Navigation("Invoice");

                    b.Navigation("ProductVar");
                });

            modelBuilder.Entity("Laptop.Models.Order", b =>
                {
                    b.HasOne("Laptop.Models.AppUserModel", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_AspNetUsers");

                    b.HasOne("Laptop.Models.Voucher", "VoucherNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("Voucher")
                        .HasConstraintName("FK_Orders_Voucher1");

                    b.Navigation("Customer");

                    b.Navigation("VoucherNavigation");
                });

            modelBuilder.Entity("Laptop.Models.OrdersDetail", b =>
                {
                    b.HasOne("Laptop.Models.Order", "Order")
                        .WithMany("OrdersDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_Details_Invoice");

                    b.HasOne("Laptop.Models.ProductVariation", "ProductVar")
                        .WithMany("OrdersDetails")
                        .HasForeignKey("ProductVarId")
                        .HasPrincipalKey("ProductVarId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdersDetails_ProductVariation");

                    b.Navigation("Order");

                    b.Navigation("ProductVar");
                });

            modelBuilder.Entity("Laptop.Models.Product", b =>
                {
                    b.HasOne("Laptop.Models.Brand", "BrandNavigation")
                        .WithMany("Products")
                        .HasForeignKey("Brand")
                        .HasConstraintName("FK_Product_Brand");

                    b.HasOne("Laptop.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Product_Category");

                    b.Navigation("BrandNavigation");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Laptop.Models.ProductComment", b =>
                {
                    b.HasOne("Laptop.Models.AppUserModel", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_ProductComment_AspNetUsers");

                    b.HasOne("Laptop.Models.Product", "Product")
                        .WithMany("ProductComments")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductComment_Product");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Laptop.Models.ProductItem", b =>
                {
                    b.HasOne("Laptop.Models.Color", "Color")
                        .WithMany("ProductItems")
                        .HasForeignKey("ColorId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductItems_Color");

                    b.HasOne("Laptop.Models.Product", "Product")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductItems_Product");

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Laptop.Models.ProductVariation", b =>
                {
                    b.HasOne("Laptop.Models.ProductItem", "ProductItems")
                        .WithMany("ProductVariations")
                        .HasForeignKey("ProductItemsId")
                        .HasPrincipalKey("ProductItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductVariation_ProductItems");

                    b.HasOne("Laptop.Models.Ram", "Ram")
                        .WithMany("ProductVariations")
                        .HasForeignKey("RamId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductVariation_Size");

                    b.HasOne("Laptop.Models.Ssd", "Ssd")
                        .WithMany("ProductVariations")
                        .HasForeignKey("Ssdid")
                        .IsRequired()
                        .HasConstraintName("FK_ProductVariation_SSD");

                    b.Navigation("ProductItems");

                    b.Navigation("Ram");

                    b.Navigation("Ssd");
                });

            modelBuilder.Entity("Laptop.Models.Tintuc", b =>
                {
                    b.HasOne("Laptop.Models.Brand", "Brand")
                        .WithMany("Tintucs")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Tintuc_Brand");

                    b.HasOne("Laptop.Models.AppUserModel", "Customer")
                        .WithMany("Tintucs")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_AspNetUsers");

                    b.Navigation("Brand");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Laptop.Models.AppUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Laptop.Models.AppUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Laptop.Models.AppUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Laptop.Models.AppUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Laptop.Models.AppUserModel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Orders");

                    b.Navigation("Tintucs");
                });

            modelBuilder.Entity("Laptop.Models.Brand", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Tintucs");
                });

            modelBuilder.Entity("Laptop.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Laptop.Models.Color", b =>
                {
                    b.Navigation("ProductItems");
                });

            modelBuilder.Entity("Laptop.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("Laptop.Models.Order", b =>
                {
                    b.Navigation("OrdersDetails");
                });

            modelBuilder.Entity("Laptop.Models.Product", b =>
                {
                    b.Navigation("ProductComments");

                    b.Navigation("ProductItems");
                });

            modelBuilder.Entity("Laptop.Models.ProductItem", b =>
                {
                    b.Navigation("ProductVariations");
                });

            modelBuilder.Entity("Laptop.Models.ProductVariation", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("OrdersDetails");
                });

            modelBuilder.Entity("Laptop.Models.Ram", b =>
                {
                    b.Navigation("ProductVariations");
                });

            modelBuilder.Entity("Laptop.Models.Ssd", b =>
                {
                    b.Navigation("ProductVariations");
                });

            modelBuilder.Entity("Laptop.Models.Supplier", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Laptop.Models.Voucher", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
